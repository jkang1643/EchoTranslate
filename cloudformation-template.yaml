AWSTemplateFormatVersion: '2010-09-09'
Description: 'Exbabel - Automated AWS Deployment Stack (EC2 + S3 + CloudFront)'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    ConstraintDescription: Must be an existing EC2 KeyPair

  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type

  SSHLocation:
    Type: String
    Default: 0.0.0.0/0
    Description: IP address range allowed to SSH (CIDR notation)
    AllowedPattern: ^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$

  DomainName:
    Type: String
    Default: 'exbabel.com'
    Description: Root domain name (e.g., exbabel.com)

  AppSubdomain:
    Type: String
    Default: 'app'
    Description: Subdomain for the application (e.g., 'app' for app.exbabel.com)

  ApiSubdomain:
    Type: String
    Default: 'api'
    Description: Subdomain for the API backend (e.g., 'api' for api.exbabel.com)

  HostedZoneId:
    Type: String
    Default: ''
    Description: (Optional) Route 53 Hosted Zone ID for automatic DNS setup. Leave empty to skip DNS configuration.

  ACMCertificateArn:
    Type: String
    Default: ''
    Description: (Optional) ACM Certificate ARN in us-east-1 that covers app subdomain. Leave empty for CloudFront default certificate.

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  HasACMCertificate: !Not [!Equals [!Ref ACMCertificateArn, '']]
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, '']]
  CreateDNSRecords: !And
    - !Condition HasDomainName
    - !Condition HasHostedZone

Resources:
  # ===================================
  # EC2 Instance for Backend
  # ===================================

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: exbabel-backend-sg
      GroupDescription: Security group for Exbabel backend
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
          Description: WebSocket access
      Tags:
        - Key: Name
          Value: exbabel-backend-sg

  BackendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Sub
        - '{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/${Arch}/hvm/ebs-gp2/ami-id}}'
        - Arch: amd64
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref BackendSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # Update system
          apt-get update
          apt-get upgrade -y
          
          # Install Node.js 18
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          
          # Install PM2
          npm install -g pm2
          
          # Install other utilities
          apt-get install -y git nginx
          
          # Configure firewall
          ufw allow OpenSSH
          ufw allow 'Nginx Full'
          ufw allow 3001/tcp
          echo "y" | ufw enable
          
          # Setup PM2 startup
          pm2 startup systemd -u ubuntu --hp /home/ubuntu
          
          # Create placeholder for application
          mkdir -p /home/ubuntu/realtimetranslationapp/backend
          chown -R ubuntu:ubuntu /home/ubuntu/realtimetranslationapp
          
          # Signal completion
          echo "EC2 setup complete" > /home/ubuntu/setup-complete.txt
          
      Tags:
        - Key: Name
          Value: exbabel-backend

  BackendEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BackendInstance
      Tags:
        - Key: Name
          Value: exbabel-backend-eip

  # ===================================
  # S3 Bucket for Frontend
  # ===================================

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'exbabel-frontend-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: exbabel-frontend

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${FrontendBucket.Arn}/*'

  # ===================================
  # CloudFront Distribution
  # ===================================

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: Exbabel Frontend Distribution
        DefaultRootObject: index.html
        Aliases:
          !If
            - HasDomainName
            - [!Sub '${AppSubdomain}.${DomainName}']
            - !Ref AWS::NoValue
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        PriceClass: PriceClass_100
        ViewerCertificate:
          !If
            - HasACMCertificate
            - AcmCertificateArn: !Ref ACMCertificateArn
              SslSupportMethod: sni-only
              MinimumProtocolVersion: TLSv1.2_2021
            - CloudFrontDefaultCertificate: true
      Tags:
        - Key: Name
          Value: exbabel-cloudfront

  # ===================================
  # Route 53 DNS Records
  # ===================================

  AppDNSRecordIPv4:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecords
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${AppSubdomain}.${DomainName}'
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (fixed value)
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false

  AppDNSRecordIPv6:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecords
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${AppSubdomain}.${DomainName}'
      Type: AAAA
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (fixed value)
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false

  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecords
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${ApiSubdomain}.${DomainName}'
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref BackendEIP

Outputs:
  BackendInstanceId:
    Description: EC2 Instance ID
    Value: !Ref BackendInstance
    Export:
      Name: !Sub '${AWS::StackName}-BackendInstanceId'

  BackendPublicIP:
    Description: Backend Public IP (use this for API/WebSocket)
    Value: !Ref BackendEIP
    Export:
      Name: !Sub '${AWS::StackName}-BackendPublicIP'

  BackendSSHCommand:
    Description: SSH command to connect to backend
    Value: !Sub 'ssh -i ${KeyPairName}.pem ubuntu@${BackendEIP}'

  S3BucketName:
    Description: S3 Bucket for Frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  S3WebsiteURL:
    Description: S3 Website URL (HTTP only)
    Value: !GetAtt FrontendBucket.WebsiteURL

  CloudFrontDomainName:
    Description: CloudFront Distribution URL (HTTPS)
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomain'

  CloudFrontURL:
    Description: Full CloudFront URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID (for cache invalidation)
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontId'

  BackendAPIURL:
    Description: Backend API URL
    Value: !If
      - CreateDNSRecords
      - !Sub 'https://${ApiSubdomain}.${DomainName}'
      - !Sub 'http://${BackendEIP}'

  BackendWebSocketURL:
    Description: Backend WebSocket URL
    Value: !If
      - CreateDNSRecords
      - !Sub 'wss://${ApiSubdomain}.${DomainName}/translate'
      - !Sub 'ws://${BackendEIP}/translate'

  FrontendURL:
    Description: Frontend Application URL
    Value: !If
      - CreateDNSRecords
      - !Sub 'https://${AppSubdomain}.${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'

  AppDomainName:
    Condition: CreateDNSRecords
    Description: Custom domain for the application
    Value: !Sub '${AppSubdomain}.${DomainName}'

  ApiDomainName:
    Condition: CreateDNSRecords
    Description: Custom domain for the API backend
    Value: !Sub '${ApiSubdomain}.${DomainName}'

  NextSteps:
    Description: Next steps to complete deployment
    Value: !If
      - CreateDNSRecords
      - !Sub |
          1. SSH to EC2: ssh -i ${KeyPairName}.pem ubuntu@${BackendEIP}
          2. Upload backend code to: /home/ubuntu/realtimetranslationapp/backend/
          3. Create .env file with API keys (OPENAI_API_KEY, GOOGLE_SPEECH_API_KEY)
          4. Install dependencies: cd backend && npm install
          5. Start backend: pm2 start server.js --name exbabel-backend
          6. Setup SSL for API: sudo certbot certonly --standalone -d ${ApiSubdomain}.${DomainName}
          7. Configure Nginx as reverse proxy with SSL
          8. Build frontend with: VITE_API_URL=https://${ApiSubdomain}.${DomainName} VITE_WS_URL=wss://${ApiSubdomain}.${DomainName}/translate
          9. Deploy frontend: aws s3 sync frontend/dist/ s3://${FrontendBucket}/ --delete
          10. Invalidate CloudFront: aws cloudfront create-invalidation --distribution-id ${CloudFrontDistribution} --paths "/*"
          11. Access app at: https://${AppSubdomain}.${DomainName}
      - !Sub |
          1. SSH to EC2: ssh -i ${KeyPairName}.pem ubuntu@${BackendEIP}
          2. Upload backend code to: /home/ubuntu/realtimetranslationapp/backend/
          3. Create .env file with API keys (OPENAI_API_KEY, GOOGLE_SPEECH_API_KEY)
          4. Install dependencies: cd backend && npm install
          5. Start backend: pm2 start server.js --name exbabel-backend
          6. Build frontend with: VITE_API_URL=http://${BackendEIP} VITE_WS_URL=ws://${BackendEIP}/translate
          7. Deploy frontend: aws s3 sync frontend/dist/ s3://${FrontendBucket}/ --delete
          8. Access app at: https://${CloudFrontDistribution.DomainName}

